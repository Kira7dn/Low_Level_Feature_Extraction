name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: 3.9
  POETRY_VERSION: 1.5.1

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install Poetry
      run: |
        pip install poetry==${{ env.POETRY_VERSION }}
        poetry config virtualenvs.create false
    
    - name: Install dependencies
      run: poetry install
    
    - name: Run linters
      run: |
        poetry run flake8 .
        poetry run black --check .
        poetry run isort --check-only .
    
    - name: Run unit tests
      run: poetry run pytest tests/
      env:
        APP_ENV: test

  performance-testing:
    needs: lint-and-test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        pip install poetry==${{ env.POETRY_VERSION }}
        poetry config virtualenvs.create false
        poetry install
    
    - name: Run Performance Tests
      run: python scripts/performance_tests.py
      env:
        APP_ENV: performance
    
    - name: Upload Performance Results
      uses: actions/upload-artifact@v3
      with:
        name: performance-test-results
        path: performance_results.json
    
    - name: Upload performance test results
      uses: actions/upload-artifact@v3
      with:
        name: performance-test-results
        path: performance_results.json

  load-testing:
    needs: performance-testing
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        pip install poetry==${{ env.POETRY_VERSION }}
        poetry config virtualenvs.create false
        poetry install
        pip install locust
    
    - name: Run load tests
      run: |
        poetry run locust -f scripts/load_tests.py --headless -u 100 -r 10 -t 1h
      env:
        APP_ENV: load-test

  docker-build-and-push:
    needs: [lint-and-test, performance-testing, load-testing]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/low-level-feature-extraction:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/low-level-feature-extraction:${{ github.sha }}

  deployment:
    needs: docker-build-and-push
    runs-on: ubuntu-latest
    steps:
    - name: Deploy to Kubernetes
      run: |
        echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > kubeconfig
        export KUBECONFIG=./kubeconfig
        kubectl set image deployment/feature-extraction-app feature-extraction-app=${{ secrets.DOCKERHUB_USERNAME }}/low-level-feature-extraction:${{ github.sha }}
