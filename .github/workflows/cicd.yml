name: CI/CD Pipeline

on:
  push:
    branches:
      - lite
  pull_request:
    branches:
      - lite

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/low-level-feature-app:latest

      - name: Run tests (optional)
        run: |
          docker run --rm ${{ secrets.DOCKERHUB_USERNAME }}/low-level-feature-app:latest pytest tests/ || echo "No tests found or tests failed"
        
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/lite'
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Install dnf if missing
            if ! command -v dnf >/dev/null 2>&1; then
              echo "dnf not found. Installing dnf..."
              sudo yum install -y dnf
            fi
            # Remove conflicting packages
            sudo dnf remove -y docker containerd containerd.io || true
            sudo dnf autoremove -y || true
            # Install Docker if not present
            if ! command -v docker >/dev/null 2>&1; then
              echo "Docker not found. Installing Docker..."
              sudo dnf update -y
              sudo dnf install -y docker
              sudo systemctl start docker
              sudo systemctl enable docker
              sudo usermod -aG docker ec2-user
              newgrp docker
            fi
            # Verify Docker is running
            docker info || exit 1
            # Pull and deploy the image
            echo "Pulling image..."
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/low-level-feature-app:latest
            echo "Stopping and removing old container..."
            docker stop low-level-feature-app || true
            docker rm low-level-feature-app || true
            echo "Running new container..."
            docker run -d -p 80:80 --name low-level-feature-app ${{ secrets.DOCKERHUB_USERNAME }}/low-level-feature-app:latest
            # Verify container is running
            echo "Checking container status..."
            sleep 5
            docker ps | grep low-level-feature-app || { echo "Container not running!"; docker logs low-level-feature-app; exit 1; }
            # Test endpoint
            echo "Testing endpoint..."
            curl -f http://localhost:80 || { echo "Endpoint not responding!"; docker logs low-level-feature-app; exit 1; }