# Task ID: 5
# Title: Implement Shape Analysis Endpoint
# Status: done
# Dependencies: 2
# Priority: medium
# Description: Create the /extract-shapes endpoint to detect shapes and measure border radii and curvature properties in design images.
# Details:
1. Create a shape analysis service in `/app/services/shape_analyzer.py`:
```python
import cv2
import numpy as np
from scipy.spatial import distance

class ShapeAnalyzer:
    @staticmethod
    def preprocess_image(image):
        """Preprocess image for shape detection"""
        # Convert to grayscale
        gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
        
        # Apply Gaussian blur to reduce noise
        blurred = cv2.GaussianBlur(gray, (5, 5), 0)
        
        # Apply Canny edge detection
        edges = cv2.Canny(blurred, 50, 150)
        
        # Dilate edges to connect broken contours
        kernel = np.ones((3, 3), np.uint8)
        dilated = cv2.dilate(edges, kernel, iterations=1)
        
        return dilated
    
    @staticmethod
    def detect_border_radius(contour, epsilon_factor=0.02):
        """Detect border radius of a contour"""
        # Approximate the contour
        epsilon = epsilon_factor * cv2.arcLength(contour, True)
        approx = cv2.approxPolyDP(contour, epsilon, True)
        
        # If it's a rectangle with rounded corners
        if len(approx) == 4:
            # Get the minimum enclosing rectangle
            rect = cv2.minAreaRect(contour)
            box = cv2.boxPoints(rect)
            box = np.int0(box)
            
            # Calculate the difference between the original contour and the rectangle
            # to estimate the border radius
            original_area = cv2.contourArea(contour)
            rect_area = cv2.contourArea(box)
            
            if rect_area > 0:
                area_diff = abs(rect_area - original_area) / rect_area
                
                # Map area difference to approximate border radius in pixels
                # This is a heuristic approach and may need calibration
                if area_diff < 0.01:  # Very small difference
                    return "0px"  # Sharp corners
                elif area_diff < 0.05:
                    return "2px"  # Slight rounding
                elif area_diff < 0.1:
                    return "4px"  # Moderate rounding
                elif area_diff < 0.15:
                    return "8px"  # Significant rounding
                else:
                    return "12px"  # Very rounded
        
        # Default if not a rectangle or can't determine
        return "0px"
    
    @staticmethod
    def analyze_shapes(image):
        """Analyze shapes in the image and detect border radii"""
        # Preprocess the image
        processed = ShapeAnalyzer.preprocess_image(image)
        
        # Find contours
        contours, _ = cv2.findContours(processed, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        
        # Filter out small contours (noise)
        min_area = 100  # Minimum contour area to consider
        significant_contours = [c for c in contours if cv2.contourArea(c) > min_area]
        
        # If no significant contours found
        if not significant_contours:
            return {"borderRadius": "0px"}
        
        # Find the largest contour (likely the main UI element)
        largest_contour = max(significant_contours, key=cv2.contourArea)
        
        # Detect border radius
        border_radius = ShapeAnalyzer.detect_border_radius(largest_contour)
        
        return {"borderRadius": border_radius}
```

2. Create the shape analysis router in `/app/routers/shapes.py`:
```python
from fastapi import APIRouter, UploadFile, File, HTTPException
from ..services.image_processor import ImageProcessor
from ..services.shape_analyzer import ShapeAnalyzer
from ..utils.image_validator import validate_image

router = APIRouter()

@router.post("/extract-shapes")
async def extract_shapes(file: UploadFile = File(...)):
    try:
        # Validate and load image
        image_bytes = await validate_image(file)
        cv_image = ImageProcessor.load_cv2_image(image_bytes)
        
        # Analyze shapes
        shape_data = ShapeAnalyzer.analyze_shapes(cv_image)
        
        return shape_data
    except HTTPException as e:
        raise e
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error analyzing shapes: {str(e)}")
```

3. Update the main.py file to include the new router:
```python
from fastapi import FastAPI
from app.routers import colors, text, shapes

app = FastAPI(
    title="Low-Level Feature Extraction API",
    description="API for extracting design elements from images",
    version="1.0.0"
)

app.include_router(colors.router, tags=["colors"])
app.include_router(text.router, tags=["text"])
app.include_router(shapes.router, tags=["shapes"])
```

# Test Strategy:
1. Test with images containing UI elements with known border radii
2. Test with images containing rectangles with sharp corners
3. Test with images containing rectangles with rounded corners of varying degrees
4. Test with images containing circular elements
5. Test with complex UI designs containing multiple shapes
6. Verify accuracy of border radius detection by comparing with known values
7. Test with images of different resolutions to ensure consistent results
8. Test performance with complex images to ensure response time is under 1 second
