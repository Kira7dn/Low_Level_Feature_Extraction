# Task ID: 8
# Title: Implement Error Handling and Input Validation
# Status: pending
# Dependencies: 1, 2, 3, 4, 5, 6, 7
# Priority: high
# Description: Enhance the API with basic error handling and input validation for personal use.
# Details:
1. Create a simple error handling module in `/app/utils/error_handler.py`:
```python
from fastapi import HTTPException
import imghdr
from PIL import Image
import io

def validate_image(file):
    """Simple image validation for personal use"""
    # Check file type
    file_type = imghdr.what(file)
    if file_type not in ['jpeg', 'png', 'jpg']:
        raise HTTPException(status_code=400, detail="Unsupported image format")
    
    # Check file size (optional)
    file.file.seek(0, 2)  # Go to end of file
    file_size = file.file.tell()
    file.file.seek(0)  # Reset file pointer
    
    if file_size > 5 * 1024 * 1024:  # 5MB limit
        raise HTTPException(status_code=400, detail="File too large")
    
    return file
```

2. Update the main.py file to include basic error handling:
```python
from fastapi import FastAPI, HTTPException, UploadFile, File
from fastapi.responses import JSONResponse
from app.routers import colors, text, shapes, shadows, fonts
from app.utils.error_handler import validate_image

app = FastAPI(
    title="Low-Level Feature Extraction API",
    description="API for extracting design elements from images",
    version="1.0.0"
)

@app.exception_handler(Exception)
async def general_exception_handler(request, exc):
    return JSONResponse(
        status_code=500,
        content={"error": str(exc)}
    )

# Register routers
app.include_router(colors.router, tags=["colors"])
app.include_router(text.router, tags=["text"])
app.include_router(shapes.router, tags=["shapes"])
app.include_router(shadows.router, tags=["shadows"])
app.include_router(fonts.router, tags=["fonts"])

@app.get("/")
async def root():
    return {"message": "Welcome to the Low-Level Feature Extraction API"}

@app.get("/health")
async def health_check():
    return {"status": "healthy"}
```

3. Update each router to use the simplified error handling by using standard FastAPI HTTPException for error cases.

# Test Strategy:
1. Test endpoints with invalid file formats and verify appropriate error responses
2. Test with oversized files and verify size limit enforcement
3. Test with missing files and verify error handling
4. Verify that error responses include a descriptive message
5. Test error handling for each specific endpoint with common error conditions
6. Verify that the application handles unexpected errors gracefully
7. Test with valid images to ensure they pass validation
