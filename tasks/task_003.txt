# Task ID: 3
# Title: Implement Color Palette Extraction Endpoint
# Status: done
# Dependencies: 2
# Priority: medium
# Description: Create the /extract-colors endpoint to identify and extract primary, background, and accent colors from uploaded images, returning RGB and HEX values.
# Details:
1. Create a color extraction service in `/app/services/color_extractor.py`:
```python
from PIL import Image
import numpy as np
from sklearn.cluster import KMeans
import cv2

class ColorExtractor:
    @staticmethod
    def rgb_to_hex(rgb):
        """Convert RGB tuple to HEX string"""
        return '#{:02x}{:02x}{:02x}'.format(rgb[0], rgb[1], rgb[2])
    
    @staticmethod
    def extract_colors(image, n_colors=5):
        """Extract dominant colors using K-means clustering"""
        # Resize image to speed up processing
        img = image.copy()
        img = cv2.resize(img, (150, 150), interpolation=cv2.INTER_AREA)
        
        # Reshape the image to be a list of pixels
        pixels = img.reshape(-1, 3)
        
        # Convert to float for better precision
        pixels = np.float32(pixels)
        
        # Define criteria and apply kmeans
        criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 200, 0.1)
        _, labels, centers = cv2.kmeans(pixels, n_colors, None, criteria, 10, cv2.KMEANS_RANDOM_CENTERS)
        
        # Convert back to uint8
        centers = np.uint8(centers)
        
        # Count occurrences of each label
        counts = np.bincount(labels.flatten())
        
        # Sort colors by count (descending)
        sorted_indices = np.argsort(counts)[::-1]
        sorted_centers = centers[sorted_indices]
        
        # Convert to RGB (from BGR)
        sorted_centers_rgb = [center[::-1] for center in sorted_centers]
        
        # Convert to hex
        hex_colors = [ColorExtractor.rgb_to_hex(color) for color in sorted_centers_rgb]
        
        return hex_colors
    
    @staticmethod
    def analyze_palette(image):
        """Analyze image and extract primary, background, and accent colors"""
        # Extract dominant colors
        colors = ColorExtractor.extract_colors(image, n_colors=5)
        
        # Analyze image to determine background color
        # Typically the most common color at the edges is the background
        h, w, _ = image.shape
        edges = np.concatenate([
            image[0, :],      # top edge
            image[h-1, :],   # bottom edge
            image[:, 0],     # left edge
            image[:, w-1]    # right edge
        ])
        
        # Find dominant color in edges
        edge_colors = cv2.kmeans(np.float32(edges.reshape(-1, 3)), 1, None, 
                               (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 200, 0.1), 
                               10, cv2.KMEANS_RANDOM_CENTERS)[2]
        
        bg_color = ColorExtractor.rgb_to_hex(edge_colors[0][::-1])
        
        # Primary color is usually the most dominant non-background color
        primary = colors[0] if colors[0] != bg_color else colors[1]
        
        # Accent colors are the remaining dominant colors
        accents = [c for c in colors if c != primary and c != bg_color][:2]  # Limit to 2 accent colors
        
        return {
            "primary": primary,
            "background": bg_color,
            "accent": accents
        }
```

2. Create the color extraction router in `/app/routers/colors.py`:
```python
from fastapi import APIRouter, UploadFile, File, HTTPException
from ..services.image_processor import ImageProcessor
from ..services.color_extractor import ColorExtractor
from ..utils.image_validator import validate_image

router = APIRouter()

@router.post("/extract-colors")
async def extract_colors(file: UploadFile = File(...)):
    try:
        # Validate and load image
        image_bytes = await validate_image(file)
        cv_image = ImageProcessor.load_cv2_image(image_bytes)
        
        # Extract color palette
        palette = ColorExtractor.analyze_palette(cv_image)
        
        return palette
    except HTTPException as e:
        raise e
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Error extracting colors: {str(e)}")
```

3. Update the main.py file to include the new router:
```python
from fastapi import FastAPI
from app.routers import colors

app = FastAPI(
    title="Low-Level Feature Extraction API",
    description="API for extracting design elements from images",
    version="1.0.0"
)

app.include_router(colors.router, tags=["colors"])
```

# Test Strategy:
1. Test with images containing clear, distinct color palettes
2. Test with monochromatic images
3. Test with images having various background types (solid, gradient, complex)
4. Verify the accuracy of primary color extraction
5. Verify background color detection works correctly
6. Verify accent colors are properly identified
7. Test with different image sizes and aspect ratios
8. Benchmark performance to ensure response time is under 1 second for standard images

# Subtasks:
## 1. Implement Error Handling for Image Processing [done]
### Dependencies: None
### Description: Add robust error handling for image processing failures in the color extraction endpoint
### Details:
Enhance the error handling in the extract_colors endpoint to catch specific exceptions like invalid image formats, corrupted files, and processing errors. Create custom error messages for each case. Implement logging for errors to aid debugging.

## 2. Add Input Validation for Color Count Parameter [done]
### Dependencies: None
### Description: Extend the endpoint to accept an optional parameter for the number of colors to extract
### Details:
Modify the extract_colors endpoint to accept an optional query parameter 'n_colors' with a default value of 5 and a valid range of 1-10. Add validation to ensure the parameter is within acceptable bounds. Update the function call to ColorExtractor.analyze_palette to pass this parameter.

## 3. Implement Response Formatting with RGB Values [done]
### Dependencies: 3.1
### Description: Extend the color extraction response to include both RGB and HEX values for all colors
### Details:
Modify the ColorExtractor.analyze_palette method to return both RGB tuples and HEX strings for each color. Update the response format to include 'rgb' and 'hex' keys for primary, background, and accent colors. Ensure the RGB values are returned as arrays of three integers.

## 4. Add Color Name Identification [done]
### Dependencies: 3.3
### Description: Enhance the color extraction to identify and return human-readable color names
### Details:
Implement a color naming function that maps RGB values to the closest named color using a predefined color dictionary. Add a 'name' field to each color in the response. Use a standard color naming library or implement a custom solution using color distance calculations.

## 5. Create Documentation and Examples for the Endpoint [done]
### Dependencies: 3.2, 3.3, 3.4
### Description: Document the /extract-colors endpoint with examples and response schemas
### Details:
Update the router definition to include detailed FastAPI documentation. Add examples of request parameters and response formats. Create a response model using Pydantic to define the exact structure of the response. Include sample images and their expected color extraction results in the documentation.

